generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                @id @default(autoincrement())
  email        String             @unique
  password     String
  name         String?
  username     String             @unique
  phone        String?
  address      String?
  avatar       String?
  bio          String?
  coverPhoto   String?            
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  replyLikes   CommentReplyLike[]
  replies      CommentReply[]
  saves        Save[]    
  products     Product[]          // Relation to products
  // User yang follow saya (my followers)
  followers    Follow[]           @relation("Followers")
  // User yang follow saya (users I follow)
  following    Follow[]           @relation("Following")

  @@map("users")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  image       String
  userId      Int
  categoryId  Int      
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id]) 
  
  @@map("products")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      // ID user yang melakukan follow
  followingId Int      // ID user yang di-follow
  createdAt   DateTime @default(now())
  
  follower    User     @relation("Following", fields: [followerId], references: [id])  // User yang melakukan follow
  following   User     @relation("Followers", fields: [followingId], references: [id]) // User yang di-follow

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  image     String
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     PostLike[]
  saves     Save[]    

  @@map("posts")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("post_likes")
}

model Comment {
  id        Int            @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  post      Post           @relation(fields: [postId], references: [id])
  likes     CommentLike[]
  replies   CommentReply[]

  @@map("comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model CommentReply {
  id        Int                @id @default(autoincrement())
  content   String
  userId    Int
  commentId Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])
  comment   Comment            @relation(fields: [commentId], references: [id])
  likes     CommentReplyLike[]

  @@map("comment_replies")
}

model CommentReplyLike {
  id        Int          @id @default(autoincrement())
  userId    Int
  replyId   Int
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  reply     CommentReply @relation(fields: [replyId], references: [id])

  @@unique([userId, replyId])
  @@map("comment_reply_likes")
}

model Save {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("saves")    
}