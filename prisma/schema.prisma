generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  username     String        @unique
  phone        String?
  address      String?       @db.Text
  avatar       String?
  bio          String?       @db.Text
  coverPhoto   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  posts        Post[]
  comments     Comment[]
  postLikes    PostLike[]
  commentLikes CommentLike[]
  saves        Save[]
  products     Product[]
  orders       Order[]
  reviews      Review[]
  followers    Follow[]      @relation("Followers")
  following    Follow[]      @relation("Following")

  @@map("users")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  price       Float
  stock       Int
  image       String
  userId      Int
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  orders      Order[]
  saves       Save[]

  @@map("products")
}

model Order {
  id           Int         @id @default(autoincrement())
  orderId      String      @unique
  userId       Int
  productId    Int
  quantity     Int
  totalAmount  Float
  productName  String
  productPrice Float
  productImage String
  status       OrderStatus @default(PENDING)
  snapToken    String
  redirectUrl  String
  paymentDue   DateTime
  paidAt       DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  product      Product     @relation(fields: [productId], references: [id])
  reviews      Review[]

  @@map("orders")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String   @db.Text
  userId    Int
  orderId   Int
  user      User     @relation(fields: [userId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  content   String     @db.Text
  image     String
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes     PostLike[]

  @@map("posts")
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String        @db.Text
  userId    Int
  postId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  post      Post          @relation(fields: [postId], references: [id])
  likes     CommentLike[]

  @@map("comments")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("post_likes")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Save {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("saves")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follows")
}

enum OrderStatus {
  EXPIRED
  CANCELED
  PENDING
  PAID
}